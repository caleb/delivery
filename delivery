#!/usr/bin/env boot

(set-env! :dependencies '[[me.raynes/conch "0.8.0"]
                          [org.clojure/core.incubator "0.1.4"]
                          [org.clojure/data.json "0.2.6"]
                          [clj-ssh "0.5.14"]
                          [commons-io/commons-io "2.5"]
                          [clojure-term-colors "0.1.0-SNAPSHOT"]
                          [org.clojure/clojure "1.9.0"]])
(import [java.nio.file Files]
        [org.apache.commons.io.output TeeOutputStream]
        [java.io StringWriter ByteArrayOutputStream])
(require '[me.raynes.conch :refer [with-programs]]
         '[me.raynes.conch.low-level :as sh]
         '[clojure.edn :as edn]
         '[clojure.string :as string]
         '[clojure.data.json :as json]
         '[clojure.pprint :as pprint]
         '[clojure.term.colors :as colors]
         '[clojure.spec.alpha :as s]
         '[clj-ssh.ssh :as ssh]
         '[clojure.core.strint :refer [<<]]
         '[clojure.java.io :refer [file]]
         '[boot.cli :refer [defclifn]])

;; The default policy file template
(defn policy-file-template [project-name options]
  (<< "name '~{project-name}'\n"
      "run_list 'recipe[meat-and-potatoes::default]', 'recipe[~{project-name}::default]'\n"
      "default_source :supermarket\n"
      "cookbook '~{project-name}', '~> 0.1.0', path: 'cookbooks/~{project-name}'\n"
      "cookbook 'meat-and-potatoes', '~> 1.0.0', github: 'caleb/meat-and-potatoes', branch: 'master'"))

;;
;; Configuration Spec
;;
(s/def ::string string?)
(s/def ::integer integer?)
(s/def ::host ::string)
(s/def ::user ::string)
(s/def ::port ::integer)
(s/def ::remote-dir ::string)
(s/def ::attributes map?)

(def config-spec (s/keys :opt-un [::host
                                  ::user
                                  ::remote-dir
                                  ::attributes
                                  ::port]))

(defn runtime-error
  ([message]
   (runtime-error message {}))
  ([message data]
   (throw (ex-info message (merge {::message message}
                                  data))))
  ([message data cause]
   (throw (ex-info message (merge {::message message} data) cause))))

(defn write-if-missing [f contents]
  (when-not (.exists (file f))
    (spit f contents)))

(defn command-exists? [cmd]
  (try
    (with-programs [which]
      (which cmd)
      true)
    (catch clojure.lang.ExceptionInfo e
      false)))

(defn config-error [explain-data]
  (str "Expected "
       (-> explain-data :path first)
       " to conform to "
       (-> explain-data :pred)
       " but got "
       (-> explain-data :val)))

(defn print-header
  ([header color-fn]
   (let [divider (color-fn (string/join (repeat (count header) "=")))]
     (print (<< "\n"
                "~{divider}\n"
                "~(color-fn header)\n"
                "~{divider}\n"
                "\n"))))
  ([header]
   (let [divider (string/join (repeat (count header) "="))]
     (print "\n")
     (println divider)
     (println header)
     (println divider)
     (print "\n"))))

(defn header-str
  ([header]
   (let [divider (string/join (repeat (count header) "="))]
     (<< "\n"
         "~{divider}\n"
         "~{header}\n"
         "~{divider}\n"
         "\n")))
  ([header color-fn]
   (let [divider (color-fn (string/join (repeat (count header) "=")))]
     (<< "\n"
         "~{divider}\n"
         "~(color-fn header)\n"
         "~{divider}\n"
         "\n"))))

(defn validate-config [f config-edn]
  (if (s/valid? config-spec config-edn)
    (s/conform config-spec config-edn)
    (let [explain-data (s/explain-data config-spec config-edn)
          header       (header-str (<< "Delivery configuration file \"~{f}\" is invalid"))
          errors       (string/join "\n" (map config-error (:clojure.spec.alpha/problems explain-data)))]
      (runtime-error (<< "~{header}\n"
                         "~{errors}")))))

(defn read-config [f]
  (if (.exists f)
    (let [config-edn (edn/read-string (slurp f))]
      (validate-config f config-edn))
    (runtime-error (str "Configuration file \"" f "\" doesn't exist"))))

(defn ssh-command [context]
  (let [port (:port context)
        user (:user context)
        host (:host context)]
    (<< "ssh -p ~{port} ~{user}@~{host}")))

(defn create-context [command options args]
  (let [config-file (file (or (:config options) "delivery.edn"))
        project-dir (.. config-file getAbsoluteFile getParent)
        config      (read-config config-file)]
    {:command     command
     :args        args
     :host        (or (:host options) (:host config))
     :port        (or (:port options) (:port config) "22")
     :run-list    (or (:run-list options) (:run-list config))
     :user        (or (:user options) (:user config) "root")
     :remote-dir  (or (:remote-dir options) (:remote-dir config) "/chef")
     :attributes  (:attributes config)
     :config-file config-file
     :project-dir project-dir}))

(defn ssh [context & commands]
  (let [user   (:user context)
        host   (:host context)
        port   (:port context)
        script (string/join "\n" commands)
        baos   (ByteArrayOutputStream.)
        out    System/out
        tee    (TeeOutputStream. baos out)]
    (with-programs [ssh]
      (let [proc (sh/proc "ssh" "-A" "-p" (str port) (<< "~{user}@~{host}") "--" "/bin/sh" "-s")]
        (sh/feed-from-string proc script)
        (sh/done proc)
        (sh/stream-to proc :out tee)
        (sh/destroy proc)
        [(== (sh/exit-code proc) 0) (string/split (.toString baos "UTF-8") #"\n")]))))

(defn rsync-to-remote [context order-dir]
  (with-programs [rsync]
    (let [port                 (:port context)
          user                 (:user context)
          host                 (:host context)
          remote-dir           (:remote-dir context)
          order-dir-with-slash (str order-dir "/")
          ssh-command          (<< "ssh -p ~{port}")
          rsh-flag             (<< "--rsh=~{ssh-command}")
          remote-target        (<< "~{user}@~{host}:~{remote-dir}")]
      (println (rsync "-a" rsh-flag order-dir-with-slash remote-target)))))

(defmulti task (fn [command & args] command))
(defmethod task :init
  [command options args]
  (when-not (and (command-exists? "knife")
                 (command-exists? "chef"))
    (runtime-error "You must have knife and chef installed.
You can install these with the Chef Development Kit:
https://downloads.chef.io/chefdk"))
  (let [target-dir       (first args)
        project-dir      (-> target-dir file .getCanonicalFile)
        project-name     (or (second args) (.getName project-dir))
        cookbooks-dir    (file project-dir "cookbooks")
        app-cookbook-dir (file cookbooks-dir project-name)]
    (when-not (.exists project-dir)
      (println (<< "Creating project directory ~{project-dir}"))
      (.mkdirs project-dir))
    (when-not (.exists cookbooks-dir)
      (println (<< "Creating cookbooks directory: ~{cookbooks-dir}"))
      (.mkdirs cookbooks-dir))
    (when-not (.exists app-cookbook-dir)
      (println (<< "Creating cookbook: ~{app-cookbook-dir}"))
      (with-programs [chef]
        (println (chef "generate" "cookbook" project-name {:dir cookbooks-dir}))))
    (write-if-missing (file project-dir "delivery.edn")
                      (let [s (java.io.StringWriter.)]
                        (pprint/pprint (cond-> {:host (or (:host options) "")
                                                :port (or (:port options) 22)
                                                :user (or (:user options) "root")
                                                :remote-dir (or (:remote-dir options) "/chef")
                                                :attributes {:meat-and-potatoes {:swap {:size 1024}
                                                                                 :firewall {:ports [22 80 443]}
                                                                                 :ssh_known_hosts ["github.com" "bitbucket.org"]}}}
                                         (:run-list options) (assoc :run-list (:run-list options)))
                                       s)
                        (.toString s)))
    (write-if-missing (file project-dir "Policyfile.rb")
                      (policy-file-template project-name options))))

(defmethod task :update
  [command options args]
  (when-not (command-exists? "chef")
    (runtime-error "You must have knife and chef installed.
You can install these with the Chef Development Kit:
https://downloads.chef.io/chefdk"))
  (let [context     (create-context command options args)
        policy-file (file (:project-dir context) "Policyfile.rb")]
    (with-programs [chef]
      (println (chef "update" policy-file)))))

(defmethod task :bootstrap
  [command options args]
  (let [context              (create-context command options args)
        chef-version         (:chef-version options)
        chef-install-options (when chef-version (<< " -- -v ~{chef-version}"))]
    (ssh context
         "apt-get update"
         "apt-get install -y curl rsync"
         (<< "curl -L 'https://omnitruck.chef.io/install.sh' | /bin/sh -s~{chef-install-options}"))))

(defmethod task :ssh
  [command options args]
  (let [context (create-context command options args)]
    (println (ssh-command context))))

(defmethod task :deploy
  [command options args]
  (let [context     (create-context command options args)
        project-dir (file (:project-dir context))
        remote-dir  (file (:remote-dir context))
        policy-file (file project-dir "Policyfile.rb")
        order-dir   (Files/createTempDirectory (.toPath project-dir) "order" (into-array java.nio.file.attribute.FileAttribute []))

        secrets     (file (or (:secrets context) "secrets.edn"))

        attributes  (or (:attributes context) {})
        attributes  (if (.exists secrets)
                      (merge {:secrets (edn/read-string (slurp secrets))} attributes)
                      attributes)]
    (with-programs [chef rm]
      (try
        (println "Packaging the order")
        (println (chef "install" policy-file))
        (println (chef "export" policy-file order-dir))
        (println "Generating attributes file")
        (if (map? attributes)
          (write-if-missing (file (.toFile order-dir) "attributes.json")
                            (json/write-str attributes)))
        (rsync-to-remote context order-dir)
        (let [[success? output] (ssh context
                                     (<< "cd ~{remote-dir}")
                                     ;; Delete all of the  existing nodes so we can re-run with new attributes
                                     "knife node bulk delete '.*' -y -z > /dev/null"
                                     (<< "chef-client --json-attributes=/chef/attributes.json -z"))]
          (when-not success?
            ;; look through the lines for a chef stacktrace and print it
            (loop [other (rest output)
                   line  (first output)]
              (let [match (re-matches #"\[\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}-\d{2}:\d{2}\] FATAL: Stacktrace dumped to (.*)" line)]
                (when match
                  (print-header (<< "Chef Stacktrace (~(second match))") colors/red)
                  (ssh context
                       (<< "cat ~(second match)")))
                (if (and (nil? match) (rest output))
                  (recur (rest other) (first other)))))))
        (finally
          (when-not (:keep-order options)
            (println "Cleaning up order directory" (.. order-dir toString))
            (rm "-rf" order-dir)))))))

(defclifn -main
  "A simple server provisioning tool using Chef Zero

  Usage: delivery <OPTIONS> <COMMAND> <ARGUMENTS>

  Commands:
    init <dir> [name]: initialize a new delivery project in <dir> with the project name [name]
                       defaults to using the filename of <dir> as the project name
    update: runs chef update to emit a new Policyfile.lock.json
    deploy: converge the remote host
    bootstrap: install curl, rsync and chef-client on the remote host
    ssh: open an ssh session to the remote host"
  [_ host         HOST        str  "the host to deploy to"
   p port         PORT        str  "the port to use for SSH (default 22)"
   c config       CONFIG      str  "the config file to read (default delivery.edn)"
   r run-list     RUNLIST    [str] "the run-list to execute on HOST"
   _ remote-dir   REMOTEDIR   str  "the directory of the order on the remote (default /chef)"
   k keep-order               bool "keep the order directory after deployment (default false)"
   u user         USER        str  "the user to deploy as (default root)"
   _ chef-version CHEFVERSION str  "the version of chef-client to install on bootstrap (default newest stable version)"]
  (try
    (let [command (-> (first *args*) keyword)
          args    (rest *args*)
          options {:host         host
                   :port         port
                   :config       config
                   :run-list     run-list
                   :chef-version chef-version
                   :remote-dir   remote-dir
                   :keep-order   (or keep-order false)
                   :user         user}]
      (if (get-method task command)
        (task command options args)
        (*usage*)))
    (catch clojure.lang.ExceptionInfo e
      (let [d (-> e ex-data)]
        (if (::message d)
          (println (::message d))
          (throw e))))))
